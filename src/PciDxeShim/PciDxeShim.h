/**
 * File: PciDxeShim.h
 * Author: Matthew Millman
 *
 * Some function headers taken from EDK2
 * SPDX-License-Identifier: BSD-2-Clause-Patent
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.
 * 
 * IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef _PCI_DXE_SHIM_H
#define _PCI_DXE_SHIM_H

#define _EFI_PCI_DEVICE_SUPPORT_H_
#define _EFI_PCI_ENUMERATOR_H_

#include "Bus/Pci/PciBusDxe/PciBus.h"
#include "Bus/Pci/PciHostBridgeDxe/PciHostBridge.h"

#include <Library/SerialPortLib.h>

typedef struct
{
  LIST_ENTRY Link;
  EFI_HANDLE HostBridgeHandle;
  EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL *OriginalProtocol;
  EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL SubstitutedProtocol;
} ResourceAllocationProtocolMapping;

typedef struct
{
  LIST_ENTRY Link;
  EFI_DRIVER_BINDING_PROTOCOL *BindingProtocol;
  EFI_HANDLE Controller;
  EFI_HANDLE HostBridgeHandle;
  EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL *OriginalProtocol;
  EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL SubstitutedProtocol;
  BOOLEAN IsOpen;
  ResourceAllocationProtocolMapping *Parent;
} RootBridgeIoProtocolMapping;

EFI_DRIVER_BINDING_PROTOCOL *FindDriverBindingProtocol();
BOOLEAN IsProtocolsMapped(EFI_DRIVER_BINDING_PROTOCOL *Protocol);
EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL *FindRootBridgeIoProtocolMappingBySubstitute(EFI_PCI_ROOT_BRIDGE_IO_PROTOCOL *Substitute);
EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL *FindResourceAllocationProtocolMappingBySubstitute(EFI_PCI_HOST_BRIDGE_RESOURCE_ALLOCATION_PROTOCOL *Substitute);

#endif /* _PCI_DXE_SHIM_H */
